[
  {
    "name": "get_data",
    "summary": "Selects a dataset.",
    "description": "Filters and selects a single dataset provided by the back-end. The back-end provider decides which of the potential datasets is the most relevant one to be selected.",
	"min_parameters": 1,
	"links": [
		{"href": "http://wwww.google.de", "rel":"test"}
	],
    "parameters": {
      "data_id": {
        "description": "Filter by data id",
        "schema": {
          "type": "string",
          "examples": [
            "Sentinel2A-L1C"
          ]
        }
      },
      "extent": {
        "description": "Filter by extent",
        "schema": {
          "type": "object",
          "required": [
            "left",
            "right",
            "top",
            "bottom"
          ],
          "properties": {
            "crs": {
              "description": "Coordinate reference system. EPSG codes must be supported. In addition, proj4 strings should be supported by back-ends. Whenever possible, it is recommended to use EPSG codes instead of proj4 strings.\nDefaults to `EPSG:4326` unless the client explicitly requests a different coordinate reference system.",
              "type": "string",
              "default": "EPSG:4326"
            },
            "left": {
              "type": "number"
            },
            "right": {
              "type": "number"
            },
            "top": {
              "type": "number"
            },
            "bottom": {
              "type": "number"
            }
          }
        }
      },
      "time": {
        "description": "Filter by time",
        "schema": {
          "type": "string"
        }
      },
      "bands": {
        "description": "Filter by band IDs",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "derived_from": {
        "description": "Filter by derived data set",
        "schema": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "license": {
        "description": "Filter by license",
        "schema": {
          "type": "string",
          "examples": [
            "Apache-2.0"
          ],
          "description": "If available, should be a license from the SPDX License List: https://spdx.org/licenses/"
        }
      }
    },
    "returns": {
      "description": "Processed EO data.",
      "schema": {
        "type": "object",
        "format": "eodata"
      }
    }
  },
  {
    "name": "filter_bands",
    "summary": "Filter an image collection by bands.",
    "description": "Allows to extract one or multiple bands of multi-band raster image collection.\nBands can be chosen either by band id, band name or by wavelength.\n\nimagery and at one of the other arguments is required to be specified.",
    "min_parameters": 2,
    "parameters": {
      "imagery": {
        "description": "EO data to process.",
        "required": true,
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "bands": {
        "description": "string or array of strings containing band ids.",
        "schema": {
          "type": [
            "string",
            "array"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "names": {
        "description": "string or array of strings containing band names.",
        "schema": {
          "type": [
            "string",
            "array"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "wavelengths": {
        "description": "number or two-element array of numbers containing a wavelength or a minimum and maximum wavelength respectively.",
        "schema": {
          "type": [
            "number",
            "array"
          ],
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "number"
          }
        }
      }
    },
    "returns": {
      "description": "Processed EO data.",
      "schema": {
        "type": "object",
        "format": "eodata"
      }
    }
  },
  {
    "name": "filter_daterange",
    "summary": "Filter an image collection by temporal extent.",
    "min_parameters": 1,
    "parameters": {
      "imagery": {
        "description": "EO data to process.",
        "required": true,
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "from": {
        "description": "Includes all data newer than the specified RFC 3339 date-time with simultaneous consideration of `to`.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "examples": [
            "2017-01-01T00:00:00Z"
          ]
        }
      },
      "to": {
        "description": "Includes all data older than the specified RFC 3339 date-time with simultaneous consideration of `from`.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "examples": [
            "2017-01-31T23:59:59Z"
          ]
        }
      }
    },
    "returns": {
      "description": "Processed EO data.",
      "schema": {
        "type": "object",
        "format": "eodata"
      }
    }
  },
  {
    "name": "process_graph",
    "description": "Loads another process graph and applies it to the specified imagery. This can be an externally hosted process graph.",
    "parameters": {
      "imagery": {
        "description": "EO data to process.",
        "required": true,
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "url": {
        "description": "An URL to a process graph.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "url",
          "examples": [
            "http://otherhost.org/api/v1/users/12345/process_graphs/abcdef"
          ]
        }
      }
    },
    "returns": {
      "description": "Processed EO data.",
      "schema": {
        "type": "object",
        "format": "eodata"
      }
    },
    "exceptions": {
      "NotFound": {
        "code": 404,
        "description": "Process graph doesn't exist."
      }
    }
  }
]