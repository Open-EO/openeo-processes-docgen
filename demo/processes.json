{
  "processes": [
    {
      "name": "get_collection",
      "summary": "Selects a collection.",
      "deprecated": true,
      "description": "Filters and selects a single collection provided by the back-end. The back-end provider decides which of the potential collections is the most relevant one to be selected.",
      "min_parameters": 1,
      "parameters": {
        "name": {
          "description": "Filter by collection name",
          "schema": {
            "type": "string",
            "examples": [
              "Sentinel2A-L1C"
            ]
          }
        },
        "spatial_extent": {
          "description": "Filter by spatial extent.",
          "schema": {
            "type": "object",
            "format": "spatial_extent"
          }
        },
        "temporal_extent": {
          "description": "Filter by time.",
          "schema": {
            "type": "array",
            "format": "temporal_extent"
          }
        },
        "bands": {
          "description": "Filter by band id.",
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "license": {
          "description": "Filter by license.",
          "schema": {
            "type": "string",
            "description": "SPDX License identifier, SPDX expression, or the string proprietary if the license is not on the SPDX license list.",
            "examples": [
              "Apache-2.0"
            ]
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "examples": {
        "Min": {
          "description": "Loading a collection",
          "process_graph": {
            "process_id": "get_collection",
            "name": "Sentinel2A-L1C"
          }
        },
        "Full": {
          "summary": "NDVI based on Sentinel 2",
          "description": "Deriving minimum NDVI measurements over pixel time series of Sentinel 2 imagery.",
          "process_graph": {
            "process_id": "min_time",
            "imagery": {
              "process_id": "NDVI",
              "imagery": {
                "process_id": "filter_daterange",
                "imagery": {
                  "process_id": "get_collection",
                  "name": {
                    "variable_id": "collection",
                    "type": "string",
                    "default": "Sentinel2A-L1C"
                  }
                },
                "extent": [
                  "2017-01-01T00:00:00Z",
                  "2017-01-31T23:59:59Z"
                ]
              },
              "red": {
                "variable_id": "red_band",
                "type": "string",
                "default": "B4"
              },
              "nir": {
                "variable_id": "nir_band",
                "type": "string",
                "default": "B8"
              }
            }
          }
        }
      }
    },
    {
      "name": "get_results",
      "summary": "Loads results from a job.",
      "description": "Loads data that has been pre-processed by a batch job.",
      "min_parameters": 1,
      "parameters": {
        "url": {
          "description": "An URL to job results.",
          "required": true,
          "schema": {
            "type": "string",
            "format": "url",
            "examples": [
              "http://host.com/api/v1/jobs/12345/results"
            ]
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "exceptions": {
        "NotFound": {
          "code": 101,
          "description": "Data set doesn't exist."
        },
        "FileFormatNotSupported": {
          "code": 102,
          "description": "The file format of the specified data set is not supported to be read by the back-end."
        }
      }
    },
    {
      "name": "filter_bands",
      "summary": "Filters by bands.",
      "description": "Allows to extract one or multiple bands of multi-band raster image collection.\nBands can be chosen either by band id, band name or by wavelength.\n\nimagery and at one of the other arguments is required to be specified.",
      "min_parameters": 2,
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "bands": {
          "description": "string or array of strings containing band ids.",
          "schema": {
            "type": [
              "string",
              "array"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "names": {
          "description": "string or array of strings containing band names.",
          "schema": {
            "type": [
              "string",
              "array"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "wavelengths": {
          "description": "Either a number specifying a specific wavelength or a two-element array of numbers specifying a minimum and maximum wavelength.",
          "schema": {
            "type": [
              "number",
              "array"
            ],
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "type": "number"
            }
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      }
    },
    {
      "name": "filter_daterange",
      "summary": "Filters by temporal extent.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "extent": {
          "description": "Temporal extent specified by a start and an end time, each formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time. Open date ranges are supported and can be specified by setting one of the times to null. Setting both entries to null is not allowed.",
          "schema": {
            "type": "array",
            "format": "temporal_extent",
            "required": true,
            "examples": [
                [
                "2016-01-01T00:00:00Z",
                "2017-10-01T00:00:00Z"
              ]
            ],
            "items": {
              "type": [
                "string",
                "null"
              ],
              "format": "date-time",
              "minItems": 2,
              "maxItems": 2
            }
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      }
    },
    {
      "name": "process_graph",
      "summary": "Loads another process graph.",
      "description": "Loads another process graph and applies it to the specified imagery. This can be an externally hosted process graph.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "url": {
          "description": "An URL to a process graph.",
          "required": true,
          "schema": {
            "type": "string",
            "format": "url",
            "examples": [
              "http://otherhost.org/api/v1/users/12345/process_graphs/abcdef"
            ]
          }
        },
        "variables": {
          "description": "An object holding key-value-pairs with values for variables that are defined by the process graph. The key of the pair has to be the corresponding `variable_id` for the value specified. The replacement for the variable is the value of the pair.",
          "schema": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "exceptions": {
        "NotFound": {
          "code": 101,
          "description": "Process graph doesn't exist."
        },
        "NotReadable": {
          "code": 102,
          "description": "Process graph can't be parsed."
        }
      }
    },
    {
      "name": "filter_bbox",
      "summary": "Filters by spatial extent.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "extent": {
          "description": "Spatial extent, may include a vertical axis (height or depth).",
          "schema": {
            "type": "object",
            "format": "spatial_extent",
            "required": [
              "west",
              "east",
              "north",
              "south"
            ],
            "properties": {
              "crs": {
                "description": "Coordinate reference system. EPSG codes must be supported. In addition, proj4 strings should be supported by back-ends. Whenever possible, it is recommended to use EPSG codes instead of proj4 strings.\nDefaults to `EPSG:4326` unless the client explicitly requests a different coordinate reference system.",
                "type": "string",
                "default": "EPSG:4326"
              },
              "west": {
                "description": "Lower left corner, coordinate axis 1 (west).",
                "type": "number"
              },
              "east": {
                "description": "Upper right corner, coordinate axis 1 (east).",
                "type": "number"
              },
              "north": {
                "description": "Lower left corner, coordinate axis 2 (north).",
                "type": "number"
              },
              "south": {
                "description": "Upper right corner, coordinate axis 2 (south).",
                "type": "number"
              },
              "base": {
                "description": "Lower left corner, coordinate axis 3 (base, optional).",
                "type": "number"
              },
              "height": {
                "description": "Upper right corner, coordinate axis 3 (height, optional).",
                "type": "number"
              }
            }
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      }
    },
    {
      "name": "NDVI",
      "summary": "Calculates the Normalized Difference Vegetation Index.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "red": {
          "description": "Band id of the red band.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        "nir": {
          "description": "Band id of the near-infrared band.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "exceptions": {
        "RedBandInvalid": {
          "description": "The specified red band is not available or contains invalid data."
        },
        "NirBandInvalid": {
          "description": "The specified nir band is not available or contains invalid data."
        }
      }
    },
    {
      "name": "min_time",
      "summary": "Calculates minimum values of time series.",
      "description": "Finds the minimum value of time series for all bands of the input dataset.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      }
    },
    {
      "name": "max_time",
      "summary": "Calculates maximum values of time series.",
      "description": "Finds the maximum value of time series for all bands of the input dataset.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      }
    },
    {
      "name": "zonal_statistics",
      "summary": "Calculates zonal statistics.",
      "description": "Calculates statistics for each zone specified in a file.",
      "parameters": {
        "imagery": {
          "description": "EO data to process.",
          "required": true,
          "schema": {
            "type": "object",
            "format": "eodata"
          }
        },
        "regions": {
          "description": "GeoJSON or a path to a GeoJSON file containing the regions. For paths you must specify the path to a user-uploaded file without the user id in the path.",
          "required": true,
          "schema": {
            "type": [
              "object",
              "string"
            ]
          }
        },
        "func": {
          "description": "Statistical function to calculate for the specified zones.",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "min",
              "max",
              "mean",
              "median",
              "mod"
            ]
          }
        },
        "scale": {
          "description": "A nominal scale in meters of the projection to work in.",
          "schema": {
            "type": "number",
            "default": 1000
          }
        },
        "interval": {
          "description": "Interval to group the time series.",
          "schema": {
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "year"
            ],
            "default": "day"
          }
        }
      },
      "returns": {
        "description": "Processed EO data.",
        "schema": {
          "type": "object",
          "format": "eodata"
        }
      },
      "exceptions": {
        "FileNotFound": {
          "description": "The specified file does not exist."
        },
        "GeoJsonInvalid": {
          "description": "The GeoJSON object is invalid."
        }
      }
    }
  ],
  "links": [
    {
      "href": "https://github.com/Open-EO/openeo-api",
      "title": "openEO API",
      "rel": "about"
    },
    {
      "href": "https://github.com/Open-EO/openeo-processes-docgen",
      "title": "Documentation generator",
      "rel": "generator"
    }
  ]
}